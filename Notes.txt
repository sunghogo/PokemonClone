Tiled:
    1. Create a new tileset:
        - Import the sprite sheet and give the new tileset file a name
        - Leave transparency off for now
        - Input the correct tile pixel dimensions

    2. New Map:
        - Set the map dimensions
        - Input the correct tile Size

    3. Game Map Editing:
        - Use layers to separate background, foreground, objects
        - Select the tiles for Use
            - Selecting multiple tiles will draw them in the selected pattern
        - Fill (F) to fill the entire canvas
        - Random Mode (D) to randomized selected tileset
        - Rectangle Select Tool (R) + DELETE to delete sections
        - To move layers, need to select the section, and then cut and paste
        - To try multiple randomization, select, then DELETE, then turn on fill, and pass over the section until you get the pattern you like

    4. Collisions:
        - Implement collision detection using collision blocks
        - Create a new tileset using the collision block and the correct tile dimensions

    5. Foreground Objects:
        - Place copies of foregrounds objects on the topmost layer so player can walk behind them

    5. Exporting:
        - Export the collision, foreground objects, and the rest of map separately
            - Make collision, foreground objects, etc. invisible
        - File -> Export As Image -> Only include visible layers & Current zoom level (to scale the image up)

HTML:
    - Set up canvas element
    - Link .js in script element
    - Link .css in link element

JS:
    - Select the canvas element using document.querySelector('canvas')
    - Set canvas dimensions using .width and .height properties
    - Get the context using .getContext('2d')

    Context Methods:
        .fillStyle = 'color'
        .fillRect = ('x', 'y', 'width', 'height')
        .drawImage('html image object', 'x', 'y')
            const 'var' = new Image()
            'var'.src = './image path'

    'context'.drawImage() needs to be passed an html image constructed from new Image(), and has its .src property set to the image path

    The html image object takes time to load, so assign the 'image'.onload property to a callback function that calls 'context'.drawImage()

    * To scale the canvas to the window height:
        1. set canvas.width = window.innerWidth - 4 and canvas.height = window.innerHeight - 4;

        2. window.addEventListener('resize', function () {reset canvas dimensions & reload and scale any images})

        3. To scale images, need to:
            const scaleX = (canvas.width / image.width) * 4;
            const scaleY = (canvas.height / image.height) * 4;
            context.save();
            context.scale(scaleX, scaleY);
            context.drawImage(image, 0, 0);
            context.restore();